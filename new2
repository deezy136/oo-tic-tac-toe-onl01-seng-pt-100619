class TicTacToe
  
 WIN_COMBINATIONS = [
   
     [0,1,2],
     [3,4,5],
     [6,7,8],
     [0,3,6],
     [1,4,7],
     [2,5,8],
     [0,4,8],
     [6,4,2]
   
   ]
   
  def initialize(board =nil)
     @board = Array.new(9," ")  || board
  end 


def display_board
    puts " #{@board[0]} | #{@board[1]} | #{@board[2]} "
    puts "-----------"
    puts " #{@board[3]} | #{@board[4]} | #{@board[5]} "
    puts "-----------"
    puts " #{@board[6]} | #{@board[7]} | #{@board[8]} "
end 

def input_to_index (user_input)
    ui_converted_to_integer =  user_input.to_i - 1 
    ui_converted_to_integer
  
end 

def move(board_index, player_token = "X")
  @board[board_index] = player_token
end 

def position_taken?(board_index)
      !(@board[board_index].nil? || @board[board_index] == " ")
end 

def valid_move?(index)
    index.between?(0,8) && !position_taken?(index)
end 
def current_player
    turn_count % 2 == 0 ? "X" : "O"
  end

  # #turn_count keeps track of the number of turns that have been taken
  # Called by #current_player
  def turn_count
    @board.count{|token| token == "X" || token == "O"}
  end
 def turn
    puts "Player #{current_player}, please enter a number 1-9:"
    input = gets.strip
    index = input_to_index(input)
    cp = current_player
    if valid_move?(index)
      move(index, cp)
      display_board
    else
      turn
    end
  end
end 

































def turn(board) 
puts “Please enter 1-9:” 
input = gets.chomp index = inputtoindex(input) if validmove?(board, index) == true && turncount(board).even? == true move(board, index, value = “X”) puts displayboard(board) elsif validmove?(board, index) == true && turncount(board).odd? == true move(board, index, value = “O”) puts displayboard(board) elsif validmove?(board, index) == false puts “Please enter 1-9:” input = gets.chomp end end def isEven?(board) return turncount(board) % 2 == 0 ? true : false end